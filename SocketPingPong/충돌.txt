<충돌체크>

-씬 내부 모든 콜라이더 매프레임 체크
-기본오브젝트(유니티의 빈오브젝트)에 컴포넌트로 추가.-> 기본오브젝트를 가리키는 포인터로 위치정보받아옴
-씬 내부 오브젝트들을 모두 돌면서 collider가 있으면 collider 정보 업데이트
- 튕기지 않음 rigidbody미구현, 생성시 겹쳐진 오브젝트들도 서로 밀어내지 않음
boxCollider로 일단 구현


===========================================
[충돌판정:]
(검사를 하려는 두 collider 비교하기) -> 모든 collider가 비교 -> n*n/2 O(n2)연산
-collider는 선으로 구성.일단  box, circle 콜라이더만 고려
1. circle-circle 은 단순히[ 중심간 거리<=두 반지름의 합] 이면 충돌.
2.box-box간은 조건을 단순화한 비교
2-1(축에 평행항 사각형일경우) =>AABB 알고리즘
//
overlapRectangles(Rectangle r1, Rectangle r2) {
    if(r1.lowerLeft.x < r2.lowerLeft.x + r2.width &&
       r1.lowerLeft.x + r1.width > r2.lowerLeft.x &&
       r1.lowerLeft.y < r2.lowerLeft.y + r2.height &&
       r1.lowerLeft.y + r1.height > r2.lowerLeft.y)
        return true;
    else
        return false;
}
//
2-2 축에 평행하지 않을경우 => obb (분리축이론)
각 변에 평행한 축에 사각형들을 투영시켰을때 한번이라도 투영된 선이 겹치지 않으면 두 사각형 겹치지 않음.
투영선이 겹치지 않는다=> 내적으로 크기만 비교. 
=>각 변에 평행한 축 L 에 대해 
-각 사각형의 중심을 연결한 벡터v라하면 v.L 
-사각형 A,B 중심에서 한 점까지의 벡터 a,b  (크기비교가 목적이므로 사각형의 어느점을 잡아도 상관없다. 어떤 점이든 내적값은 같다. 중심점 하나를 미리  잡아 연산을 줄이자)
- v.L > a.L+b.L 일 경우 투영선이 겹치지 않음. 즉 두 사각형이 겹치지 않음
두 사각형에 대해 4번의 축을 계산 (각 사각형은 평행한 축이 두쌍씩 있으므로)


collider도 vertex 기준의 도형이다. 도형간 충돌은 한 vertex가 다른 도형의 내부에 있으면 충돌이다. (원의 경우도 점의 집합이므로 표면의 모든 부분이 vertex라 가정)
한 vertex가 다른 도형내부에있는지는 어케아나?


===========================
[충돌 처리]
scene에서 모든 오브젝트와 collider를 관리. 생성시 vector그룹에 각각 넣어준다.
한 프레임마다 collider를 순서대로 돌며 충돌 검사.(n2)
충돌시 충돌한 두 collider의 오브젝트에 oncollision함수 호출(상대 collider의 obj정보를 넘겨줌)
obj정보를 뭘로 넘겨주나?
1.obj객체 그자체(복사생성자)
2.obj 참조
3.scene에서 오브젝트 벡터 그룹에서 obj의 인덱스->탐색빠름 구현 편함 (검사중에 oncollision에서 오브젝트나 콜라이더를 삭제하는 명령이 있으면? index가 땡겨질텐데)
4.obj고유넘버(생성시 scene에서 부여)->복사생성자, 대입연산자 따로 생성->탐색속도를 어케 늘리나

충돌시 작용반작용
->rigidbody가 적용중인 물체는 반작용을 받음. (탄성계수 1)
->//X상대가 rigidbody가 없으면 본인은 움직임이 막힘(탄성계수0)
->둘다 rigidbody가 적용중이면 운동량 보존 작용반작용(탄성계수 1)
->둘다 rigidbody가 없으면 반응 x

움직임 막힘구현?
1움직인 후에 collider가 오브젝트를 따라오게 했는데, 충돌을 감지하면 감지한 오브젝트가 충돌한 방향을 인지해 해당 방향의 움직임을 막는다.
2움직이는 물체만 collider를 해당방향으로 먼저 움직여 보고 충돌이 일어나면 해당 방향의 움직임을 취소한다.
1-1 충돌을 감지하면 충돌한 거리(x,y각각) 만큼 밀어낸다. (unity에선 일정한 속도로 밀어낸다)

=======
[Rigidbody]
질량, 속도 존재
충돌시 해당 오브젝트에 rigidbody가 있으면 rigidbody에서 운동재정의
->튕겨나가 방향이 바뀌어도 다음 프레임에 여전히 충돌처리중일 수 있다. 이러면 다시 방향이 바뀌는것을 방지해야한다->해당 collider와 충돌이 벗어남을 감지해야함 onColliderExit처럼
======


[처리과정]
오브젝트들의 update 처리 후 , 씬에서 collider들의 충돌을 체크.
충돌판정된 collider들의 owner 오브젝트들에게 Oncollision 호출 (사용자가 구현한 코드실행)

rigidbody가 있으면 rigidbody의 충돌 함수 호출
(일단 한쪽만 rigid가있는 상황만 구현)
충돌 방향:
<원(p1)- 박스(p2) 일경우>
(충돌이 일어난 상황)
if ( (p2.x-p1.x)^2 >w^2) 이면 p1.x-p2.x 방향
if ( (p2.y-p1.y)^2 >h^2) 이면 p1.y-p2.y 방향
==>>튕긴거니 각 방향 속도부호만 변경
================
플레이어는 위아래로만 움직임. 화면 끝에 부딪히면 충돌. 반작용x
공은 화면끝(벽)에 부딪히면 반작용만. 플레이어와 부딪힐시 플레이어의 움직임 방향에따라 y축 가속도.
